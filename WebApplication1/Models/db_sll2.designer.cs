#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
    using System.Web;

    public class ParentLeaveRequestViewModel
    {
        public int RequestId { get; set; }
        public string StudentName { get; set; }

        public string ClassName { get; set; }
        public string Reason { get; set; }
        public DateTime? RequestDate { get; set; }
        public string ApprovalStatus { get; set; }
    }

    public class LeaveRequestViewModel
    {
        public int RequestId { get; set; }
        public string StudentName { get; set; }
        public string ClassName { get; set; }
        public string Reason { get; set; }
        public DateTime? RequestDate { get; set; }
        public string ApprovalStatus { get; set; }
    }

    public class TimetableViewModel
    {
        public Student Student { get; set; }
        public List<TimetableDetailViewModel> TimetableDetails { get; set; }
        public DateTime StartDate { get; set; }
        public List<TimeSlot> TimeSlots { get; set; }
    }

    public class TimeSlot
    {
        public string Time { get; set; }
        public string Session { get; set; }
    }

    public class TimetableViewModel1
    {
        public Student Student { get; set; }
        public DateTime StartDate { get; set; }
        public List<TimetableDetailViewModel> TimetableDetails { get; set; }

    }
    public class TeacherTimetableViewModel
    {
        public Teacher Teacher { get; set; }
        public List<TimetableDetailViewModel> TimetableDetails { get; set; }
        public DateTime StartDate { get; set; }
    }

    public class TimetableDetailViewModel
    {
        public int Weekday { get; set; }
        public string Time { get; set; }
        public string SubjectName { get; set; }
        public string TeacherName { get; set; }
        public DateTime Date { get; set; }
        public string ClassName { get; set; }

    }

    public class StudentViewModel
    {
        public int StudentId { get; set; }
        public int UserId { get; set; }
        public string Name { get; set; }
        public DateTime? DateOfBirth { get; set; }
        public int ClassId { get; set; }
        public string SDTPH { get; set; }
        public int GradeID { get; set; }
        public string ClassName { get; set; }
        public string HomeroomTeacher { get; set; }
    }
    public class StudentScoreViewModel
    {
        public int StudentId { get; set; }
        public string Name { get; set; }
        public string Scores { get; set; }
        public decimal? Score15 { get; set; }
        public decimal? Score60 { get; set; }
        public decimal? GiuaKi { get; set; }
        public decimal? CuoiKi { get; set; }
        public decimal? Semester { get; set; }
        public string ScoreType { get; set; }
        public int ScoreId { get; set; }
        public decimal? TongKet { get; set; }
        public string Status { get; set; }


    }
    public class UploadScoresViewModel1
    {
        public HttpPostedFileBase ExcelFile { get; set; }
        public int ClassId { get; set; }
        public int TeacherId { get; set; }
        public int Semester { get; set; }
        public string ScoreType { get; set; }
    }
    public class UpdateScoresViewModel
    {
        public List<StudentScoreViewModel> Students { get; set; }
        public int ClassId { get; set; }
        public int TeacherId { get; set; }
        public int Semester { get; set; }
    }	


    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name="soLienLac5")]
	public partial class db_sll2DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAcademicResult(AcademicResult instance);
    partial void UpdateAcademicResult(AcademicResult instance);
    partial void DeleteAcademicResult(AcademicResult instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertChat(Chat instance);
    partial void UpdateChat(Chat instance);
    partial void DeleteChat(Chat instance);
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertGrade(Grade instance);
    partial void UpdateGrade(Grade instance);
    partial void DeleteGrade(Grade instance);
    partial void InsertLeaveRequest(LeaveRequest instance);
    partial void UpdateLeaveRequest(LeaveRequest instance);
    partial void DeleteLeaveRequest(LeaveRequest instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertNotification(Notification instance);
    partial void UpdateNotification(Notification instance);
    partial void DeleteNotification(Notification instance);
    partial void InsertParent(Parent instance);
    partial void UpdateParent(Parent instance);
    partial void DeleteParent(Parent instance);
    partial void InsertParentStudentRelationship(ParentStudentRelationship instance);
    partial void UpdateParentStudentRelationship(ParentStudentRelationship instance);
    partial void DeleteParentStudentRelationship(ParentStudentRelationship instance);
    partial void InsertScore(Score instance);
    partial void UpdateScore(Score instance);
    partial void DeleteScore(Score instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertSubjectTeacher(SubjectTeacher instance);
    partial void UpdateSubjectTeacher(SubjectTeacher instance);
    partial void DeleteSubjectTeacher(SubjectTeacher instance);
    partial void InsertTeacher(Teacher instance);
    partial void UpdateTeacher(Teacher instance);
    partial void DeleteTeacher(Teacher instance);
    partial void InsertTeacherClassAssignment(TeacherClassAssignment instance);
    partial void UpdateTeacherClassAssignment(TeacherClassAssignment instance);
    partial void DeleteTeacherClassAssignment(TeacherClassAssignment instance);
    partial void InsertTimetable(Timetable instance);
    partial void UpdateTimetable(Timetable instance);
    partial void DeleteTimetable(Timetable instance);
    #endregion
		
		public db_sll2DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public db_sll2DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public db_sll2DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public db_sll2DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AcademicResult> AcademicResults
		{
			get
			{
				return this.GetTable<AcademicResult>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Chat> Chats
		{
			get
			{
				return this.GetTable<Chat>();
			}
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<Grade> Grades
		{
			get
			{
				return this.GetTable<Grade>();
			}
		}
		
		public System.Data.Linq.Table<LeaveRequest> LeaveRequests
		{
			get
			{
				return this.GetTable<LeaveRequest>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<Notification> Notifications
		{
			get
			{
				return this.GetTable<Notification>();
			}
		}
		
		public System.Data.Linq.Table<Parent> Parents
		{
			get
			{
				return this.GetTable<Parent>();
			}
		}
		
		public System.Data.Linq.Table<ParentStudentRelationship> ParentStudentRelationships
		{
			get
			{
				return this.GetTable<ParentStudentRelationship>();
			}
		}
		
		public System.Data.Linq.Table<Score> Scores
		{
			get
			{
				return this.GetTable<Score>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<SubjectTeacher> SubjectTeachers
		{
			get
			{
				return this.GetTable<SubjectTeacher>();
			}
		}
		
		public System.Data.Linq.Table<Teacher> Teachers
		{
			get
			{
				return this.GetTable<Teacher>();
			}
		}
		
		public System.Data.Linq.Table<TeacherClassAssignment> TeacherClassAssignments
		{
			get
			{
				return this.GetTable<TeacherClassAssignment>();
			}
		}
		
		public System.Data.Linq.Table<Timetable> Timetables
		{
			get
			{
				return this.GetTable<Timetable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AcademicResults")]
	public partial class AcademicResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResultId;
		
		private System.Nullable<int> _StudentId;
		
		private System.Nullable<int> _AcademicYear;
		
		private System.Nullable<decimal> _AnnualAvg;
		
		private string _Status;
		
		private System.Nullable<bool> _Promotion;
		
		private string _Classification;
		
		private System.Nullable<decimal> _AvgVietnamese;
		
		private System.Nullable<decimal> _AvgMathematics;
		
		private System.Nullable<decimal> _AvgEnglish;
		
		private System.Nullable<decimal> _AvgBiology;
		
		private System.Nullable<decimal> _AvgHistory;
		
		private System.Nullable<decimal> _AvgGeography;
		
		private System.Nullable<decimal> _AvgChemistry;
		
		private System.Nullable<decimal> _AvgTechnology;
		
		private EntityRef<Grade> _Grade;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResultIdChanging(int value);
    partial void OnResultIdChanged();
    partial void OnStudentIdChanging(System.Nullable<int> value);
    partial void OnStudentIdChanged();
    partial void OnAcademicYearChanging(System.Nullable<int> value);
    partial void OnAcademicYearChanged();
    partial void OnAnnualAvgChanging(System.Nullable<decimal> value);
    partial void OnAnnualAvgChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnPromotionChanging(System.Nullable<bool> value);
    partial void OnPromotionChanged();
    partial void OnClassificationChanging(string value);
    partial void OnClassificationChanged();
    partial void OnAvgVietnameseChanging(System.Nullable<decimal> value);
    partial void OnAvgVietnameseChanged();
    partial void OnAvgMathematicsChanging(System.Nullable<decimal> value);
    partial void OnAvgMathematicsChanged();
    partial void OnAvgEnglishChanging(System.Nullable<decimal> value);
    partial void OnAvgEnglishChanged();
    partial void OnAvgBiologyChanging(System.Nullable<decimal> value);
    partial void OnAvgBiologyChanged();
    partial void OnAvgHistoryChanging(System.Nullable<decimal> value);
    partial void OnAvgHistoryChanged();
    partial void OnAvgGeographyChanging(System.Nullable<decimal> value);
    partial void OnAvgGeographyChanged();
    partial void OnAvgChemistryChanging(System.Nullable<decimal> value);
    partial void OnAvgChemistryChanged();
    partial void OnAvgTechnologyChanging(System.Nullable<decimal> value);
    partial void OnAvgTechnologyChanged();
    #endregion
		
		public AcademicResult()
		{
			this._Grade = default(EntityRef<Grade>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ResultId
		{
			get
			{
				return this._ResultId;
			}
			set
			{
				if ((this._ResultId != value))
				{
					this.OnResultIdChanging(value);
					this.SendPropertyChanging();
					this._ResultId = value;
					this.SendPropertyChanged("ResultId");
					this.OnResultIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int")]
		public System.Nullable<int> StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicYear", DbType="Int")]
		public System.Nullable<int> AcademicYear
		{
			get
			{
				return this._AcademicYear;
			}
			set
			{
				if ((this._AcademicYear != value))
				{
					if (this._Grade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAcademicYearChanging(value);
					this.SendPropertyChanging();
					this._AcademicYear = value;
					this.SendPropertyChanged("AcademicYear");
					this.OnAcademicYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnnualAvg", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> AnnualAvg
		{
			get
			{
				return this._AnnualAvg;
			}
			set
			{
				if ((this._AnnualAvg != value))
				{
					this.OnAnnualAvgChanging(value);
					this.SendPropertyChanging();
					this._AnnualAvg = value;
					this.SendPropertyChanged("AnnualAvg");
					this.OnAnnualAvgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Promotion", DbType="Bit")]
		public System.Nullable<bool> Promotion
		{
			get
			{
				return this._Promotion;
			}
			set
			{
				if ((this._Promotion != value))
				{
					this.OnPromotionChanging(value);
					this.SendPropertyChanging();
					this._Promotion = value;
					this.SendPropertyChanged("Promotion");
					this.OnPromotionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Classification", DbType="NVarChar(50)")]
		public string Classification
		{
			get
			{
				return this._Classification;
			}
			set
			{
				if ((this._Classification != value))
				{
					this.OnClassificationChanging(value);
					this.SendPropertyChanging();
					this._Classification = value;
					this.SendPropertyChanged("Classification");
					this.OnClassificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvgVietnamese", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> AvgVietnamese
		{
			get
			{
				return this._AvgVietnamese;
			}
			set
			{
				if ((this._AvgVietnamese != value))
				{
					this.OnAvgVietnameseChanging(value);
					this.SendPropertyChanging();
					this._AvgVietnamese = value;
					this.SendPropertyChanged("AvgVietnamese");
					this.OnAvgVietnameseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvgMathematics", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> AvgMathematics
		{
			get
			{
				return this._AvgMathematics;
			}
			set
			{
				if ((this._AvgMathematics != value))
				{
					this.OnAvgMathematicsChanging(value);
					this.SendPropertyChanging();
					this._AvgMathematics = value;
					this.SendPropertyChanged("AvgMathematics");
					this.OnAvgMathematicsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvgEnglish", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> AvgEnglish
		{
			get
			{
				return this._AvgEnglish;
			}
			set
			{
				if ((this._AvgEnglish != value))
				{
					this.OnAvgEnglishChanging(value);
					this.SendPropertyChanging();
					this._AvgEnglish = value;
					this.SendPropertyChanged("AvgEnglish");
					this.OnAvgEnglishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvgBiology", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> AvgBiology
		{
			get
			{
				return this._AvgBiology;
			}
			set
			{
				if ((this._AvgBiology != value))
				{
					this.OnAvgBiologyChanging(value);
					this.SendPropertyChanging();
					this._AvgBiology = value;
					this.SendPropertyChanged("AvgBiology");
					this.OnAvgBiologyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvgHistory", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> AvgHistory
		{
			get
			{
				return this._AvgHistory;
			}
			set
			{
				if ((this._AvgHistory != value))
				{
					this.OnAvgHistoryChanging(value);
					this.SendPropertyChanging();
					this._AvgHistory = value;
					this.SendPropertyChanged("AvgHistory");
					this.OnAvgHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvgGeography", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> AvgGeography
		{
			get
			{
				return this._AvgGeography;
			}
			set
			{
				if ((this._AvgGeography != value))
				{
					this.OnAvgGeographyChanging(value);
					this.SendPropertyChanging();
					this._AvgGeography = value;
					this.SendPropertyChanged("AvgGeography");
					this.OnAvgGeographyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvgChemistry", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> AvgChemistry
		{
			get
			{
				return this._AvgChemistry;
			}
			set
			{
				if ((this._AvgChemistry != value))
				{
					this.OnAvgChemistryChanging(value);
					this.SendPropertyChanging();
					this._AvgChemistry = value;
					this.SendPropertyChanged("AvgChemistry");
					this.OnAvgChemistryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvgTechnology", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> AvgTechnology
		{
			get
			{
				return this._AvgTechnology;
			}
			set
			{
				if ((this._AvgTechnology != value))
				{
					this.OnAvgTechnologyChanging(value);
					this.SendPropertyChanging();
					this._AvgTechnology = value;
					this.SendPropertyChanged("AvgTechnology");
					this.OnAvgTechnologyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_AcademicResult", Storage="_Grade", ThisKey="AcademicYear", OtherKey="GradeID", IsForeignKey=true)]
		public Grade Grade
		{
			get
			{
				return this._Grade.Entity;
			}
			set
			{
				Grade previousValue = this._Grade.Entity;
				if (((previousValue != value) 
							|| (this._Grade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grade.Entity = null;
						previousValue.AcademicResults.Remove(this);
					}
					this._Grade.Entity = value;
					if ((value != null))
					{
						value.AcademicResults.Add(this);
						this._AcademicYear = value.GradeID;
					}
					else
					{
						this._AcademicYear = default(Nullable<int>);
					}
					this.SendPropertyChanged("Grade");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_AcademicResult", Storage="_Student", ThisKey="StudentId", OtherKey="StudentId", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.AcademicResults.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.AcademicResults.Add(this);
						this._StudentId = value.StudentId;
					}
					else
					{
						this._StudentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _Username;
		
		private string _Password;
		
		private int _UserType;
		
		private EntitySet<Chat> _Chats;
		
		private EntitySet<Chat> _Chats1;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<Message> _Messages1;
		
		private EntitySet<Parent> _Parents;
		
		private EntitySet<Staff> _Staffs;
		
		private EntitySet<Student> _Students;
		
		private EntitySet<Teacher> _Teachers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserTypeChanging(int value);
    partial void OnUserTypeChanged();
    #endregion
		
		public User()
		{
			this._Chats = new EntitySet<Chat>(new Action<Chat>(this.attach_Chats), new Action<Chat>(this.detach_Chats));
			this._Chats1 = new EntitySet<Chat>(new Action<Chat>(this.attach_Chats1), new Action<Chat>(this.detach_Chats1));
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._Messages1 = new EntitySet<Message>(new Action<Message>(this.attach_Messages1), new Action<Message>(this.detach_Messages1));
			this._Parents = new EntitySet<Parent>(new Action<Parent>(this.attach_Parents), new Action<Parent>(this.detach_Parents));
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._Teachers = new EntitySet<Teacher>(new Action<Teacher>(this.attach_Teachers), new Action<Teacher>(this.detach_Teachers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="Int NOT NULL")]
		public int UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					this.OnUserTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType = value;
					this.SendPropertyChanged("UserType");
					this.OnUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Chat", Storage="_Chats", ThisKey="UserId", OtherKey="UserId1")]
		public EntitySet<Chat> Chats
		{
			get
			{
				return this._Chats;
			}
			set
			{
				this._Chats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Chat1", Storage="_Chats1", ThisKey="UserId", OtherKey="UserId2")]
		public EntitySet<Chat> Chats1
		{
			get
			{
				return this._Chats1;
			}
			set
			{
				this._Chats1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message", Storage="_Messages", ThisKey="UserId", OtherKey="ReceiverId")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message1", Storage="_Messages1", ThisKey="UserId", OtherKey="SenderId")]
		public EntitySet<Message> Messages1
		{
			get
			{
				return this._Messages1;
			}
			set
			{
				this._Messages1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Parent", Storage="_Parents", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Parent> Parents
		{
			get
			{
				return this._Parents;
			}
			set
			{
				this._Parents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Staff", Storage="_Staffs", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Student", Storage="_Students", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Teacher", Storage="_Teachers", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Teacher> Teachers
		{
			get
			{
				return this._Teachers;
			}
			set
			{
				this._Teachers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Chats(Chat entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Chats(Chat entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Chats1(Chat entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Chats1(Chat entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Messages1(Message entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Messages1(Message entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Parents(Parent entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Parents(Parent entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Teachers(Teacher entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Teachers(Teacher entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Chats")]
	public partial class Chat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChatId;
		
		private System.Nullable<int> _UserId1;
		
		private System.Nullable<int> _UserId2;
		
		private System.Nullable<System.DateTime> _Timestamp;
		
		private int _UserType1;
		
		private int _UserType2;
		
		private string _Content;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChatIdChanging(int value);
    partial void OnChatIdChanged();
    partial void OnUserId1Changing(System.Nullable<int> value);
    partial void OnUserId1Changed();
    partial void OnUserId2Changing(System.Nullable<int> value);
    partial void OnUserId2Changed();
    partial void OnTimestampChanging(System.Nullable<System.DateTime> value);
    partial void OnTimestampChanged();
    partial void OnUserType1Changing(int value);
    partial void OnUserType1Changed();
    partial void OnUserType2Changing(int value);
    partial void OnUserType2Changed();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    #endregion
		
		public Chat()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChatId
		{
			get
			{
				return this._ChatId;
			}
			set
			{
				if ((this._ChatId != value))
				{
					this.OnChatIdChanging(value);
					this.SendPropertyChanging();
					this._ChatId = value;
					this.SendPropertyChanged("ChatId");
					this.OnChatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId1", DbType="Int")]
		public System.Nullable<int> UserId1
		{
			get
			{
				return this._UserId1;
			}
			set
			{
				if ((this._UserId1 != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserId1Changing(value);
					this.SendPropertyChanging();
					this._UserId1 = value;
					this.SendPropertyChanged("UserId1");
					this.OnUserId1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId2", DbType="Int")]
		public System.Nullable<int> UserId2
		{
			get
			{
				return this._UserId2;
			}
			set
			{
				if ((this._UserId2 != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserId2Changing(value);
					this.SendPropertyChanging();
					this._UserId2 = value;
					this.SendPropertyChanged("UserId2");
					this.OnUserId2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType1", DbType="Int NOT NULL")]
		public int UserType1
		{
			get
			{
				return this._UserType1;
			}
			set
			{
				if ((this._UserType1 != value))
				{
					this.OnUserType1Changing(value);
					this.SendPropertyChanging();
					this._UserType1 = value;
					this.SendPropertyChanged("UserType1");
					this.OnUserType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType2", DbType="Int NOT NULL")]
		public int UserType2
		{
			get
			{
				return this._UserType2;
			}
			set
			{
				if ((this._UserType2 != value))
				{
					this.OnUserType2Changing(value);
					this.SendPropertyChanging();
					this._UserType2 = value;
					this.SendPropertyChanged("UserType2");
					this.OnUserType2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Chat", Storage="_User", ThisKey="UserId1", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Chats.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Chats.Add(this);
						this._UserId1 = value.UserId;
					}
					else
					{
						this._UserId1 = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Chat1", Storage="_User1", ThisKey="UserId2", OtherKey="UserId", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Chats1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Chats1.Add(this);
						this._UserId2 = value.UserId;
					}
					else
					{
						this._UserId2 = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Classes")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassId;
		
		private string _ClassName;
		
		private System.Nullable<int> _TeacherId;
		
		private System.Nullable<int> _AcademicYear;
		
		private System.Nullable<int> _GradeId;
		
		private EntitySet<Notification> _Notifications;
		
		private EntitySet<Score> _Scores;
		
		private EntitySet<Student> _Students;
		
		private EntitySet<TeacherClassAssignment> _TeacherClassAssignments;
		
		private EntitySet<Timetable> _Timetables;
		
		private EntityRef<Grade> _Grade;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    partial void OnTeacherIdChanging(System.Nullable<int> value);
    partial void OnTeacherIdChanged();
    partial void OnAcademicYearChanging(System.Nullable<int> value);
    partial void OnAcademicYearChanged();
    partial void OnGradeIdChanging(System.Nullable<int> value);
    partial void OnGradeIdChanged();
    #endregion
		
		public Class()
		{
			this._Notifications = new EntitySet<Notification>(new Action<Notification>(this.attach_Notifications), new Action<Notification>(this.detach_Notifications));
			this._Scores = new EntitySet<Score>(new Action<Score>(this.attach_Scores), new Action<Score>(this.detach_Scores));
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._TeacherClassAssignments = new EntitySet<TeacherClassAssignment>(new Action<TeacherClassAssignment>(this.attach_TeacherClassAssignments), new Action<TeacherClassAssignment>(this.detach_TeacherClassAssignments));
			this._Timetables = new EntitySet<Timetable>(new Action<Timetable>(this.attach_Timetables), new Action<Timetable>(this.detach_Timetables));
			this._Grade = default(EntityRef<Grade>);
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="NVarChar(50)")]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="Int")]
		public System.Nullable<int> TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicYear", DbType="Int")]
		public System.Nullable<int> AcademicYear
		{
			get
			{
				return this._AcademicYear;
			}
			set
			{
				if ((this._AcademicYear != value))
				{
					this.OnAcademicYearChanging(value);
					this.SendPropertyChanging();
					this._AcademicYear = value;
					this.SendPropertyChanged("AcademicYear");
					this.OnAcademicYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeId", DbType="Int")]
		public System.Nullable<int> GradeId
		{
			get
			{
				return this._GradeId;
			}
			set
			{
				if ((this._GradeId != value))
				{
					if (this._Grade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGradeIdChanging(value);
					this.SendPropertyChanging();
					this._GradeId = value;
					this.SendPropertyChanged("GradeId");
					this.OnGradeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Notification", Storage="_Notifications", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<Notification> Notifications
		{
			get
			{
				return this._Notifications;
			}
			set
			{
				this._Notifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Score", Storage="_Scores", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<Score> Scores
		{
			get
			{
				return this._Scores;
			}
			set
			{
				this._Scores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Student", Storage="_Students", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_TeacherClassAssignment", Storage="_TeacherClassAssignments", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<TeacherClassAssignment> TeacherClassAssignments
		{
			get
			{
				return this._TeacherClassAssignments;
			}
			set
			{
				this._TeacherClassAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Timetable", Storage="_Timetables", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<Timetable> Timetables
		{
			get
			{
				return this._Timetables;
			}
			set
			{
				this._Timetables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Class", Storage="_Grade", ThisKey="GradeId", OtherKey="GradeID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Grade Grade
		{
			get
			{
				return this._Grade.Entity;
			}
			set
			{
				Grade previousValue = this._Grade.Entity;
				if (((previousValue != value) 
							|| (this._Grade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grade.Entity = null;
						previousValue.Classes.Remove(this);
					}
					this._Grade.Entity = value;
					if ((value != null))
					{
						value.Classes.Add(this);
						this._GradeId = value.GradeID;
					}
					else
					{
						this._GradeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Grade");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Class", Storage="_Teacher", ThisKey="TeacherId", OtherKey="TeacherId", IsForeignKey=true, DeleteRule="SET NULL")]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.Classes.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.Classes.Add(this);
						this._TeacherId = value.TeacherId;
					}
					else
					{
						this._TeacherId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
		
		private void attach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
		
		private void attach_TeacherClassAssignments(TeacherClassAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_TeacherClassAssignments(TeacherClassAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
		
		private void attach_Timetables(Timetable entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Timetables(Timetable entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Grades")]
	public partial class Grade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GradeID;
		
		private System.Nullable<int> _Grade1;
		
		private System.Nullable<int> _AcademicYear;
		
		private EntitySet<AcademicResult> _AcademicResults;
		
		private EntitySet<Class> _Classes;
		
		private EntitySet<Score> _Scores;
		
		private EntitySet<Student> _Students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGradeIDChanging(int value);
    partial void OnGradeIDChanged();
    partial void OnGrade1Changing(System.Nullable<int> value);
    partial void OnGrade1Changed();
    partial void OnAcademicYearChanging(System.Nullable<int> value);
    partial void OnAcademicYearChanged();
    #endregion
		
		public Grade()
		{
			this._AcademicResults = new EntitySet<AcademicResult>(new Action<AcademicResult>(this.attach_AcademicResults), new Action<AcademicResult>(this.detach_AcademicResults));
			this._Classes = new EntitySet<Class>(new Action<Class>(this.attach_Classes), new Action<Class>(this.detach_Classes));
			this._Scores = new EntitySet<Score>(new Action<Score>(this.attach_Scores), new Action<Score>(this.detach_Scores));
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GradeID
		{
			get
			{
				return this._GradeID;
			}
			set
			{
				if ((this._GradeID != value))
				{
					this.OnGradeIDChanging(value);
					this.SendPropertyChanging();
					this._GradeID = value;
					this.SendPropertyChanged("GradeID");
					this.OnGradeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Grade", Storage="_Grade1", DbType="Int")]
		public System.Nullable<int> Grade1
		{
			get
			{
				return this._Grade1;
			}
			set
			{
				if ((this._Grade1 != value))
				{
					this.OnGrade1Changing(value);
					this.SendPropertyChanging();
					this._Grade1 = value;
					this.SendPropertyChanged("Grade1");
					this.OnGrade1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicYear", DbType="Int")]
		public System.Nullable<int> AcademicYear
		{
			get
			{
				return this._AcademicYear;
			}
			set
			{
				if ((this._AcademicYear != value))
				{
					this.OnAcademicYearChanging(value);
					this.SendPropertyChanging();
					this._AcademicYear = value;
					this.SendPropertyChanged("AcademicYear");
					this.OnAcademicYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_AcademicResult", Storage="_AcademicResults", ThisKey="GradeID", OtherKey="AcademicYear")]
		public EntitySet<AcademicResult> AcademicResults
		{
			get
			{
				return this._AcademicResults;
			}
			set
			{
				this._AcademicResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Class", Storage="_Classes", ThisKey="GradeID", OtherKey="GradeId")]
		public EntitySet<Class> Classes
		{
			get
			{
				return this._Classes;
			}
			set
			{
				this._Classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Score", Storage="_Scores", ThisKey="GradeID", OtherKey="GradeID")]
		public EntitySet<Score> Scores
		{
			get
			{
				return this._Scores;
			}
			set
			{
				this._Scores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Student", Storage="_Students", ThisKey="GradeID", OtherKey="GradeID")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AcademicResults(AcademicResult entity)
		{
			this.SendPropertyChanging();
			entity.Grade = this;
		}
		
		private void detach_AcademicResults(AcademicResult entity)
		{
			this.SendPropertyChanging();
			entity.Grade = null;
		}
		
		private void attach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Grade = this;
		}
		
		private void detach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Grade = null;
		}
		
		private void attach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.Grade = this;
		}
		
		private void detach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.Grade = null;
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Grade = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Grade = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeaveRequests")]
	public partial class LeaveRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RequestId;
		
		private System.Nullable<int> _StudentId;
		
		private System.Nullable<int> _TeacherId;
		
		private string _Reason;
		
		private System.Nullable<System.DateTime> _RequestDate;
		
		private string _ApprovalStatus;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestIdChanging(int value);
    partial void OnRequestIdChanged();
    partial void OnStudentIdChanging(System.Nullable<int> value);
    partial void OnStudentIdChanged();
    partial void OnTeacherIdChanging(System.Nullable<int> value);
    partial void OnTeacherIdChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnRequestDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRequestDateChanged();
    partial void OnApprovalStatusChanging(string value);
    partial void OnApprovalStatusChanged();
    #endregion
		
		public LeaveRequest()
		{
			this._Student = default(EntityRef<Student>);
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequestId
		{
			get
			{
				return this._RequestId;
			}
			set
			{
				if ((this._RequestId != value))
				{
					this.OnRequestIdChanging(value);
					this.SendPropertyChanging();
					this._RequestId = value;
					this.SendPropertyChanged("RequestId");
					this.OnRequestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int")]
		public System.Nullable<int> StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="Int")]
		public System.Nullable<int> TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="NVarChar(MAX)")]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovalStatus", DbType="NVarChar(50)")]
		public string ApprovalStatus
		{
			get
			{
				return this._ApprovalStatus;
			}
			set
			{
				if ((this._ApprovalStatus != value))
				{
					this.OnApprovalStatusChanging(value);
					this.SendPropertyChanging();
					this._ApprovalStatus = value;
					this.SendPropertyChanged("ApprovalStatus");
					this.OnApprovalStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_LeaveRequest", Storage="_Student", ThisKey="StudentId", OtherKey="StudentId", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.LeaveRequests.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.LeaveRequests.Add(this);
						this._StudentId = value.StudentId;
					}
					else
					{
						this._StudentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_LeaveRequest", Storage="_Teacher", ThisKey="TeacherId", OtherKey="TeacherId", IsForeignKey=true, DeleteRule="SET NULL")]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.LeaveRequests.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.LeaveRequests.Add(this);
						this._TeacherId = value.TeacherId;
					}
					else
					{
						this._TeacherId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Messages")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageId;
		
		private System.Nullable<int> _SenderId;
		
		private System.Nullable<int> _ReceiverId;
		
		private string _Content;
		
		private System.Nullable<System.DateTime> _Timestamp;
		
		private int _SenderType;
		
		private int _ReceiverType;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIdChanging(int value);
    partial void OnMessageIdChanged();
    partial void OnSenderIdChanging(System.Nullable<int> value);
    partial void OnSenderIdChanged();
    partial void OnReceiverIdChanging(System.Nullable<int> value);
    partial void OnReceiverIdChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnTimestampChanging(System.Nullable<System.DateTime> value);
    partial void OnTimestampChanged();
    partial void OnSenderTypeChanging(int value);
    partial void OnSenderTypeChanged();
    partial void OnReceiverTypeChanging(int value);
    partial void OnReceiverTypeChanged();
    #endregion
		
		public Message()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageId
		{
			get
			{
				return this._MessageId;
			}
			set
			{
				if ((this._MessageId != value))
				{
					this.OnMessageIdChanging(value);
					this.SendPropertyChanging();
					this._MessageId = value;
					this.SendPropertyChanged("MessageId");
					this.OnMessageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderId", DbType="Int")]
		public System.Nullable<int> SenderId
		{
			get
			{
				return this._SenderId;
			}
			set
			{
				if ((this._SenderId != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderIdChanging(value);
					this.SendPropertyChanging();
					this._SenderId = value;
					this.SendPropertyChanged("SenderId");
					this.OnSenderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverId", DbType="Int")]
		public System.Nullable<int> ReceiverId
		{
			get
			{
				return this._ReceiverId;
			}
			set
			{
				if ((this._ReceiverId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverIdChanging(value);
					this.SendPropertyChanging();
					this._ReceiverId = value;
					this.SendPropertyChanged("ReceiverId");
					this.OnReceiverIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderType", DbType="Int NOT NULL")]
		public int SenderType
		{
			get
			{
				return this._SenderType;
			}
			set
			{
				if ((this._SenderType != value))
				{
					this.OnSenderTypeChanging(value);
					this.SendPropertyChanging();
					this._SenderType = value;
					this.SendPropertyChanged("SenderType");
					this.OnSenderTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverType", DbType="Int NOT NULL")]
		public int ReceiverType
		{
			get
			{
				return this._ReceiverType;
			}
			set
			{
				if ((this._ReceiverType != value))
				{
					this.OnReceiverTypeChanging(value);
					this.SendPropertyChanging();
					this._ReceiverType = value;
					this.SendPropertyChanged("ReceiverType");
					this.OnReceiverTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message", Storage="_User", ThisKey="ReceiverId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._ReceiverId = value.UserId;
					}
					else
					{
						this._ReceiverId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message1", Storage="_User1", ThisKey="SenderId", OtherKey="UserId", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Messages1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Messages1.Add(this);
						this._SenderId = value.UserId;
					}
					else
					{
						this._SenderId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notifications")]
	public partial class Notification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NotificationId;
		
		private System.Nullable<int> _UserType;
		
		private System.Nullable<int> _SenderId;
		
		private string _NameContent;
		
		private string _Content;
		
		private System.Nullable<System.DateTime> _Timestamp;
		
		private System.Nullable<int> _ClassId;
		
		private EntityRef<Class> _Class;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotificationIdChanging(int value);
    partial void OnNotificationIdChanged();
    partial void OnUserTypeChanging(System.Nullable<int> value);
    partial void OnUserTypeChanged();
    partial void OnSenderIdChanging(System.Nullable<int> value);
    partial void OnSenderIdChanged();
    partial void OnNameContentChanging(string value);
    partial void OnNameContentChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnTimestampChanging(System.Nullable<System.DateTime> value);
    partial void OnTimestampChanged();
    partial void OnClassIdChanging(System.Nullable<int> value);
    partial void OnClassIdChanged();
    #endregion
		
		public Notification()
		{
			this._Class = default(EntityRef<Class>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NotificationId
		{
			get
			{
				return this._NotificationId;
			}
			set
			{
				if ((this._NotificationId != value))
				{
					this.OnNotificationIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationId = value;
					this.SendPropertyChanged("NotificationId");
					this.OnNotificationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="Int")]
		public System.Nullable<int> UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					this.OnUserTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType = value;
					this.SendPropertyChanged("UserType");
					this.OnUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderId", DbType="Int")]
		public System.Nullable<int> SenderId
		{
			get
			{
				return this._SenderId;
			}
			set
			{
				if ((this._SenderId != value))
				{
					this.OnSenderIdChanging(value);
					this.SendPropertyChanging();
					this._SenderId = value;
					this.SendPropertyChanged("SenderId");
					this.OnSenderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameContent", DbType="NVarChar(MAX)")]
		public string NameContent
		{
			get
			{
				return this._NameContent;
			}
			set
			{
				if ((this._NameContent != value))
				{
					this.OnNameContentChanging(value);
					this.SendPropertyChanging();
					this._NameContent = value;
					this.SendPropertyChanged("NameContent");
					this.OnNameContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int")]
		public System.Nullable<int> ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Notification", Storage="_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Notifications.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Notifications.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Parents")]
	public partial class Parent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ParentId;
		
		private System.Nullable<int> _UserId;
		
		private string _Name;
		
		private string _Email;
		
		private string _Address;
		
		private EntitySet<ParentStudentRelationship> _ParentStudentRelationships;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParentIdChanging(int value);
    partial void OnParentIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Parent()
		{
			this._ParentStudentRelationships = new EntitySet<ParentStudentRelationship>(new Action<ParentStudentRelationship>(this.attach_ParentStudentRelationships), new Action<ParentStudentRelationship>(this.detach_ParentStudentRelationships));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parent_ParentStudentRelationship", Storage="_ParentStudentRelationships", ThisKey="ParentId", OtherKey="ParentId")]
		public EntitySet<ParentStudentRelationship> ParentStudentRelationships
		{
			get
			{
				return this._ParentStudentRelationships;
			}
			set
			{
				this._ParentStudentRelationships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Parent", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Parents.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Parents.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ParentStudentRelationships(ParentStudentRelationship entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_ParentStudentRelationships(ParentStudentRelationship entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ParentStudentRelationship")]
	public partial class ParentStudentRelationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RelationshipId;
		
		private System.Nullable<int> _ParentId;
		
		private System.Nullable<int> _StudentId;
		
		private EntityRef<Parent> _Parent;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipIdChanging(int value);
    partial void OnRelationshipIdChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    partial void OnStudentIdChanging(System.Nullable<int> value);
    partial void OnStudentIdChanged();
    #endregion
		
		public ParentStudentRelationship()
		{
			this._Parent = default(EntityRef<Parent>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RelationshipId
		{
			get
			{
				return this._RelationshipId;
			}
			set
			{
				if ((this._RelationshipId != value))
				{
					this.OnRelationshipIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipId = value;
					this.SendPropertyChanged("RelationshipId");
					this.OnRelationshipIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int")]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int")]
		public System.Nullable<int> StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parent_ParentStudentRelationship", Storage="_Parent", ThisKey="ParentId", OtherKey="ParentId", IsForeignKey=true)]
		public Parent Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				Parent previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.ParentStudentRelationships.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.ParentStudentRelationships.Add(this);
						this._ParentId = value.ParentId;
					}
					else
					{
						this._ParentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_ParentStudentRelationship", Storage="_Student", ThisKey="StudentId", OtherKey="StudentId", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.ParentStudentRelationships.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.ParentStudentRelationships.Add(this);
						this._StudentId = value.StudentId;
					}
					else
					{
						this._StudentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Score")]
	public partial class Score : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScoreId;
		
		private System.Nullable<int> _StudentId;
		
		private System.Nullable<int> _ClassId;
		
		private System.Nullable<int> _TeacherId;
		
		private string _Scores;
		
		private System.Nullable<decimal> _Score15;
		
		private System.Nullable<decimal> _Score60;
		
		private System.Nullable<decimal> _GiuaKi;
		
		private System.Nullable<decimal> _CuoiKi;
		
		private System.Nullable<decimal> _TongKet;
		
		private string _SubjectTC;
		
		private System.Nullable<int> _Semester;
		
		private string _Status;
		
		private System.Nullable<int> _GradeID;
		
		private EntityRef<Grade> _Grade;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScoreIdChanging(int value);
    partial void OnScoreIdChanged();
    partial void OnStudentIdChanging(System.Nullable<int> value);
    partial void OnStudentIdChanged();
    partial void OnClassIdChanging(System.Nullable<int> value);
    partial void OnClassIdChanged();
    partial void OnTeacherIdChanging(System.Nullable<int> value);
    partial void OnTeacherIdChanged();
    partial void OnScoresChanging(string value);
    partial void OnScoresChanged();
    partial void OnScore15Changing(System.Nullable<decimal> value);
    partial void OnScore15Changed();
    partial void OnScore60Changing(System.Nullable<decimal> value);
    partial void OnScore60Changed();
    partial void OnGiuaKiChanging(System.Nullable<decimal> value);
    partial void OnGiuaKiChanged();
    partial void OnCuoiKiChanging(System.Nullable<decimal> value);
    partial void OnCuoiKiChanged();
    partial void OnTongKetChanging(System.Nullable<decimal> value);
    partial void OnTongKetChanged();
    partial void OnSubjectTCChanging(string value);
    partial void OnSubjectTCChanged();
    partial void OnSemesterChanging(System.Nullable<int> value);
    partial void OnSemesterChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnGradeIDChanging(System.Nullable<int> value);
    partial void OnGradeIDChanged();
    #endregion
		
		public Score()
		{
			this._Grade = default(EntityRef<Grade>);
			this._Class = default(EntityRef<Class>);
			this._Student = default(EntityRef<Student>);
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScoreId
		{
			get
			{
				return this._ScoreId;
			}
			set
			{
				if ((this._ScoreId != value))
				{
					this.OnScoreIdChanging(value);
					this.SendPropertyChanging();
					this._ScoreId = value;
					this.SendPropertyChanged("ScoreId");
					this.OnScoreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int")]
		public System.Nullable<int> StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int")]
		public System.Nullable<int> ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="Int")]
		public System.Nullable<int> TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scores", DbType="NVarChar(MAX)")]
		public string Scores
		{
			get
			{
				return this._Scores;
			}
			set
			{
				if ((this._Scores != value))
				{
					this.OnScoresChanging(value);
					this.SendPropertyChanging();
					this._Scores = value;
					this.SendPropertyChanged("Scores");
					this.OnScoresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score15", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Score15
		{
			get
			{
				return this._Score15;
			}
			set
			{
				if ((this._Score15 != value))
				{
					this.OnScore15Changing(value);
					this.SendPropertyChanging();
					this._Score15 = value;
					this.SendPropertyChanged("Score15");
					this.OnScore15Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score60", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Score60
		{
			get
			{
				return this._Score60;
			}
			set
			{
				if ((this._Score60 != value))
				{
					this.OnScore60Changing(value);
					this.SendPropertyChanging();
					this._Score60 = value;
					this.SendPropertyChanged("Score60");
					this.OnScore60Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiuaKi", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> GiuaKi
		{
			get
			{
				return this._GiuaKi;
			}
			set
			{
				if ((this._GiuaKi != value))
				{
					this.OnGiuaKiChanging(value);
					this.SendPropertyChanging();
					this._GiuaKi = value;
					this.SendPropertyChanged("GiuaKi");
					this.OnGiuaKiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CuoiKi", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> CuoiKi
		{
			get
			{
				return this._CuoiKi;
			}
			set
			{
				if ((this._CuoiKi != value))
				{
					this.OnCuoiKiChanging(value);
					this.SendPropertyChanging();
					this._CuoiKi = value;
					this.SendPropertyChanged("CuoiKi");
					this.OnCuoiKiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TongKet", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TongKet
		{
			get
			{
				return this._TongKet;
			}
			set
			{
				if ((this._TongKet != value))
				{
					this.OnTongKetChanging(value);
					this.SendPropertyChanging();
					this._TongKet = value;
					this.SendPropertyChanged("TongKet");
					this.OnTongKetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectTC", DbType="NVarChar(50)")]
		public string SubjectTC
		{
			get
			{
				return this._SubjectTC;
			}
			set
			{
				if ((this._SubjectTC != value))
				{
					this.OnSubjectTCChanging(value);
					this.SendPropertyChanging();
					this._SubjectTC = value;
					this.SendPropertyChanged("SubjectTC");
					this.OnSubjectTCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Semester", DbType="Int")]
		public System.Nullable<int> Semester
		{
			get
			{
				return this._Semester;
			}
			set
			{
				if ((this._Semester != value))
				{
					this.OnSemesterChanging(value);
					this.SendPropertyChanging();
					this._Semester = value;
					this.SendPropertyChanged("Semester");
					this.OnSemesterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeID", DbType="Int")]
		public System.Nullable<int> GradeID
		{
			get
			{
				return this._GradeID;
			}
			set
			{
				if ((this._GradeID != value))
				{
					if (this._Grade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGradeIDChanging(value);
					this.SendPropertyChanging();
					this._GradeID = value;
					this.SendPropertyChanged("GradeID");
					this.OnGradeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Score", Storage="_Grade", ThisKey="GradeID", OtherKey="GradeID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Grade Grade
		{
			get
			{
				return this._Grade.Entity;
			}
			set
			{
				Grade previousValue = this._Grade.Entity;
				if (((previousValue != value) 
							|| (this._Grade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grade.Entity = null;
						previousValue.Scores.Remove(this);
					}
					this._Grade.Entity = value;
					if ((value != null))
					{
						value.Scores.Add(this);
						this._GradeID = value.GradeID;
					}
					else
					{
						this._GradeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Grade");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Score", Storage="_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Scores.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Scores.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Score", Storage="_Student", ThisKey="StudentId", OtherKey="StudentId", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Scores.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Scores.Add(this);
						this._StudentId = value.StudentId;
					}
					else
					{
						this._StudentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Score", Storage="_Teacher", ThisKey="TeacherId", OtherKey="TeacherId", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.Scores.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.Scores.Add(this);
						this._TeacherId = value.TeacherId;
					}
					else
					{
						this._TeacherId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StaffId;
		
		private System.Nullable<int> _UserId;
		
		private string _Name;
		
		private string _Position;
		
		private string _Email;
		
		private string _Phone;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIdChanging(int value);
    partial void OnStaffIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
		
		public Staff()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					this.OnStaffIdChanging(value);
					this.SendPropertyChanging();
					this._StaffId = value;
					this.SendPropertyChanged("StaffId");
					this.OnStaffIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(50)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Staff", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentId;
		
		private System.Nullable<int> _UserId;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private System.Nullable<int> _ClassId;
		
		private string _SDTPH;
		
		private System.Nullable<int> _GradeID;
		
		private EntitySet<AcademicResult> _AcademicResults;
		
		private EntitySet<LeaveRequest> _LeaveRequests;
		
		private EntitySet<ParentStudentRelationship> _ParentStudentRelationships;
		
		private EntitySet<Score> _Scores;
		
		private EntityRef<Grade> _Grade;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIdChanging(int value);
    partial void OnStudentIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnClassIdChanging(System.Nullable<int> value);
    partial void OnClassIdChanged();
    partial void OnSDTPHChanging(string value);
    partial void OnSDTPHChanged();
    partial void OnGradeIDChanging(System.Nullable<int> value);
    partial void OnGradeIDChanged();
    #endregion
		
		public Student()
		{
			this._AcademicResults = new EntitySet<AcademicResult>(new Action<AcademicResult>(this.attach_AcademicResults), new Action<AcademicResult>(this.detach_AcademicResults));
			this._LeaveRequests = new EntitySet<LeaveRequest>(new Action<LeaveRequest>(this.attach_LeaveRequests), new Action<LeaveRequest>(this.detach_LeaveRequests));
			this._ParentStudentRelationships = new EntitySet<ParentStudentRelationship>(new Action<ParentStudentRelationship>(this.attach_ParentStudentRelationships), new Action<ParentStudentRelationship>(this.detach_ParentStudentRelationships));
			this._Scores = new EntitySet<Score>(new Action<Score>(this.attach_Scores), new Action<Score>(this.detach_Scores));
			this._Grade = default(EntityRef<Grade>);
			this._Class = default(EntityRef<Class>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int")]
		public System.Nullable<int> ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SDTPH", DbType="NVarChar(20)")]
		public string SDTPH
		{
			get
			{
				return this._SDTPH;
			}
			set
			{
				if ((this._SDTPH != value))
				{
					this.OnSDTPHChanging(value);
					this.SendPropertyChanging();
					this._SDTPH = value;
					this.SendPropertyChanged("SDTPH");
					this.OnSDTPHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeID", DbType="Int")]
		public System.Nullable<int> GradeID
		{
			get
			{
				return this._GradeID;
			}
			set
			{
				if ((this._GradeID != value))
				{
					if (this._Grade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGradeIDChanging(value);
					this.SendPropertyChanging();
					this._GradeID = value;
					this.SendPropertyChanged("GradeID");
					this.OnGradeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_AcademicResult", Storage="_AcademicResults", ThisKey="StudentId", OtherKey="StudentId")]
		public EntitySet<AcademicResult> AcademicResults
		{
			get
			{
				return this._AcademicResults;
			}
			set
			{
				this._AcademicResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_LeaveRequest", Storage="_LeaveRequests", ThisKey="StudentId", OtherKey="StudentId")]
		public EntitySet<LeaveRequest> LeaveRequests
		{
			get
			{
				return this._LeaveRequests;
			}
			set
			{
				this._LeaveRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_ParentStudentRelationship", Storage="_ParentStudentRelationships", ThisKey="StudentId", OtherKey="StudentId")]
		public EntitySet<ParentStudentRelationship> ParentStudentRelationships
		{
			get
			{
				return this._ParentStudentRelationships;
			}
			set
			{
				this._ParentStudentRelationships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Score", Storage="_Scores", ThisKey="StudentId", OtherKey="StudentId")]
		public EntitySet<Score> Scores
		{
			get
			{
				return this._Scores;
			}
			set
			{
				this._Scores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Student", Storage="_Grade", ThisKey="GradeID", OtherKey="GradeID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Grade Grade
		{
			get
			{
				return this._Grade.Entity;
			}
			set
			{
				Grade previousValue = this._Grade.Entity;
				if (((previousValue != value) 
							|| (this._Grade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grade.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Grade.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._GradeID = value.GradeID;
					}
					else
					{
						this._GradeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Grade");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Student", Storage="_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true, DeleteRule="SET NULL")]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Student", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AcademicResults(AcademicResult entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_AcademicResults(AcademicResult entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_LeaveRequests(LeaveRequest entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_LeaveRequests(LeaveRequest entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_ParentStudentRelationships(ParentStudentRelationship entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_ParentStudentRelationships(ParentStudentRelationship entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subject")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubjectId;
		
		private string _SubjectName;
		
		private EntitySet<SubjectTeacher> _SubjectTeachers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubjectIdChanging(int value);
    partial void OnSubjectIdChanged();
    partial void OnSubjectNameChanging(string value);
    partial void OnSubjectNameChanged();
    #endregion
		
		public Subject()
		{
			this._SubjectTeachers = new EntitySet<SubjectTeacher>(new Action<SubjectTeacher>(this.attach_SubjectTeachers), new Action<SubjectTeacher>(this.detach_SubjectTeachers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SubjectName
		{
			get
			{
				return this._SubjectName;
			}
			set
			{
				if ((this._SubjectName != value))
				{
					this.OnSubjectNameChanging(value);
					this.SendPropertyChanging();
					this._SubjectName = value;
					this.SendPropertyChanged("SubjectName");
					this.OnSubjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_SubjectTeacher", Storage="_SubjectTeachers", ThisKey="SubjectId", OtherKey="SubjectId")]
		public EntitySet<SubjectTeacher> SubjectTeachers
		{
			get
			{
				return this._SubjectTeachers;
			}
			set
			{
				this._SubjectTeachers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubjectTeachers(SubjectTeacher entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_SubjectTeachers(SubjectTeacher entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubjectTeacher")]
	public partial class SubjectTeacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubjectTeacherId;
		
		private System.Nullable<int> _TeacherId;
		
		private System.Nullable<int> _SubjectId;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubjectTeacherIdChanging(int value);
    partial void OnSubjectTeacherIdChanged();
    partial void OnTeacherIdChanging(System.Nullable<int> value);
    partial void OnTeacherIdChanged();
    partial void OnSubjectIdChanging(System.Nullable<int> value);
    partial void OnSubjectIdChanged();
    #endregion
		
		public SubjectTeacher()
		{
			this._Subject = default(EntityRef<Subject>);
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectTeacherId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubjectTeacherId
		{
			get
			{
				return this._SubjectTeacherId;
			}
			set
			{
				if ((this._SubjectTeacherId != value))
				{
					this.OnSubjectTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectTeacherId = value;
					this.SendPropertyChanged("SubjectTeacherId");
					this.OnSubjectTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="Int")]
		public System.Nullable<int> TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="Int")]
		public System.Nullable<int> SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_SubjectTeacher", Storage="_Subject", ThisKey="SubjectId", OtherKey="SubjectId", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.SubjectTeachers.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.SubjectTeachers.Add(this);
						this._SubjectId = value.SubjectId;
					}
					else
					{
						this._SubjectId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_SubjectTeacher", Storage="_Teacher", ThisKey="TeacherId", OtherKey="TeacherId", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.SubjectTeachers.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.SubjectTeachers.Add(this);
						this._TeacherId = value.TeacherId;
					}
					else
					{
						this._TeacherId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teacher")]
	public partial class Teacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeacherId;
		
		private System.Nullable<int> _UserId;
		
		private string _Name;
		
		private string _SubjectTC;
		
		private string _SDT;
		
		private string _Address;
		
		private EntitySet<Class> _Classes;
		
		private EntitySet<LeaveRequest> _LeaveRequests;
		
		private EntitySet<Score> _Scores;
		
		private EntitySet<SubjectTeacher> _SubjectTeachers;
		
		private EntitySet<TeacherClassAssignment> _TeacherClassAssignments;
		
		private EntitySet<Timetable> _Timetables;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeacherIdChanging(int value);
    partial void OnTeacherIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSubjectTCChanging(string value);
    partial void OnSubjectTCChanged();
    partial void OnSDTChanging(string value);
    partial void OnSDTChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Teacher()
		{
			this._Classes = new EntitySet<Class>(new Action<Class>(this.attach_Classes), new Action<Class>(this.detach_Classes));
			this._LeaveRequests = new EntitySet<LeaveRequest>(new Action<LeaveRequest>(this.attach_LeaveRequests), new Action<LeaveRequest>(this.detach_LeaveRequests));
			this._Scores = new EntitySet<Score>(new Action<Score>(this.attach_Scores), new Action<Score>(this.detach_Scores));
			this._SubjectTeachers = new EntitySet<SubjectTeacher>(new Action<SubjectTeacher>(this.attach_SubjectTeachers), new Action<SubjectTeacher>(this.detach_SubjectTeachers));
			this._TeacherClassAssignments = new EntitySet<TeacherClassAssignment>(new Action<TeacherClassAssignment>(this.attach_TeacherClassAssignments), new Action<TeacherClassAssignment>(this.detach_TeacherClassAssignments));
			this._Timetables = new EntitySet<Timetable>(new Action<Timetable>(this.attach_Timetables), new Action<Timetable>(this.detach_Timetables));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectTC", DbType="NVarChar(50)")]
		public string SubjectTC
		{
			get
			{
				return this._SubjectTC;
			}
			set
			{
				if ((this._SubjectTC != value))
				{
					this.OnSubjectTCChanging(value);
					this.SendPropertyChanging();
					this._SubjectTC = value;
					this.SendPropertyChanged("SubjectTC");
					this.OnSubjectTCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SDT", DbType="NVarChar(20)")]
		public string SDT
		{
			get
			{
				return this._SDT;
			}
			set
			{
				if ((this._SDT != value))
				{
					this.OnSDTChanging(value);
					this.SendPropertyChanging();
					this._SDT = value;
					this.SendPropertyChanged("SDT");
					this.OnSDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Class", Storage="_Classes", ThisKey="TeacherId", OtherKey="TeacherId")]
		public EntitySet<Class> Classes
		{
			get
			{
				return this._Classes;
			}
			set
			{
				this._Classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_LeaveRequest", Storage="_LeaveRequests", ThisKey="TeacherId", OtherKey="TeacherId")]
		public EntitySet<LeaveRequest> LeaveRequests
		{
			get
			{
				return this._LeaveRequests;
			}
			set
			{
				this._LeaveRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Score", Storage="_Scores", ThisKey="TeacherId", OtherKey="TeacherId")]
		public EntitySet<Score> Scores
		{
			get
			{
				return this._Scores;
			}
			set
			{
				this._Scores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_SubjectTeacher", Storage="_SubjectTeachers", ThisKey="TeacherId", OtherKey="TeacherId")]
		public EntitySet<SubjectTeacher> SubjectTeachers
		{
			get
			{
				return this._SubjectTeachers;
			}
			set
			{
				this._SubjectTeachers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_TeacherClassAssignment", Storage="_TeacherClassAssignments", ThisKey="TeacherId", OtherKey="TeacherId")]
		public EntitySet<TeacherClassAssignment> TeacherClassAssignments
		{
			get
			{
				return this._TeacherClassAssignments;
			}
			set
			{
				this._TeacherClassAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Timetable", Storage="_Timetables", ThisKey="TeacherId", OtherKey="TeacherId")]
		public EntitySet<Timetable> Timetables
		{
			get
			{
				return this._Timetables;
			}
			set
			{
				this._Timetables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Teacher", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Teachers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Teachers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
		
		private void attach_LeaveRequests(LeaveRequest entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_LeaveRequests(LeaveRequest entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
		
		private void attach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
		
		private void attach_SubjectTeachers(SubjectTeacher entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_SubjectTeachers(SubjectTeacher entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
		
		private void attach_TeacherClassAssignments(TeacherClassAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_TeacherClassAssignments(TeacherClassAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
		
		private void attach_Timetables(Timetable entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_Timetables(Timetable entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeacherClassAssignment")]
	public partial class TeacherClassAssignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssignmentId;
		
		private System.Nullable<int> _TeacherId;
		
		private System.Nullable<int> _ClassId;
		
		private System.Nullable<int> _IsHeadTeacher;
		
		private System.Nullable<int> _AcademicYear;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssignmentIdChanging(int value);
    partial void OnAssignmentIdChanged();
    partial void OnTeacherIdChanging(System.Nullable<int> value);
    partial void OnTeacherIdChanged();
    partial void OnClassIdChanging(System.Nullable<int> value);
    partial void OnClassIdChanged();
    partial void OnIsHeadTeacherChanging(System.Nullable<int> value);
    partial void OnIsHeadTeacherChanged();
    partial void OnAcademicYearChanging(System.Nullable<int> value);
    partial void OnAcademicYearChanged();
    #endregion
		
		public TeacherClassAssignment()
		{
			this._Class = default(EntityRef<Class>);
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AssignmentId
		{
			get
			{
				return this._AssignmentId;
			}
			set
			{
				if ((this._AssignmentId != value))
				{
					this.OnAssignmentIdChanging(value);
					this.SendPropertyChanging();
					this._AssignmentId = value;
					this.SendPropertyChanged("AssignmentId");
					this.OnAssignmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="Int")]
		public System.Nullable<int> TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int")]
		public System.Nullable<int> ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHeadTeacher", DbType="Int")]
		public System.Nullable<int> IsHeadTeacher
		{
			get
			{
				return this._IsHeadTeacher;
			}
			set
			{
				if ((this._IsHeadTeacher != value))
				{
					this.OnIsHeadTeacherChanging(value);
					this.SendPropertyChanging();
					this._IsHeadTeacher = value;
					this.SendPropertyChanged("IsHeadTeacher");
					this.OnIsHeadTeacherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicYear", DbType="Int")]
		public System.Nullable<int> AcademicYear
		{
			get
			{
				return this._AcademicYear;
			}
			set
			{
				if ((this._AcademicYear != value))
				{
					this.OnAcademicYearChanging(value);
					this.SendPropertyChanging();
					this._AcademicYear = value;
					this.SendPropertyChanged("AcademicYear");
					this.OnAcademicYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_TeacherClassAssignment", Storage="_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.TeacherClassAssignments.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.TeacherClassAssignments.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_TeacherClassAssignment", Storage="_Teacher", ThisKey="TeacherId", OtherKey="TeacherId", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.TeacherClassAssignments.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.TeacherClassAssignments.Add(this);
						this._TeacherId = value.TeacherId;
					}
					else
					{
						this._TeacherId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Timetable")]
	public partial class Timetable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TimetableId;
		
		private System.Nullable<int> _ClassId;
		
		private System.Nullable<int> _Weekdays;
		
		private string _Times;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _TeacherId;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimetableIdChanging(int value);
    partial void OnTimetableIdChanged();
    partial void OnClassIdChanging(System.Nullable<int> value);
    partial void OnClassIdChanged();
    partial void OnWeekdaysChanging(System.Nullable<int> value);
    partial void OnWeekdaysChanged();
    partial void OnTimesChanging(string value);
    partial void OnTimesChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnTeacherIdChanging(System.Nullable<int> value);
    partial void OnTeacherIdChanged();
    #endregion
		
		public Timetable()
		{
			this._Class = default(EntityRef<Class>);
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimetableId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TimetableId
		{
			get
			{
				return this._TimetableId;
			}
			set
			{
				if ((this._TimetableId != value))
				{
					this.OnTimetableIdChanging(value);
					this.SendPropertyChanging();
					this._TimetableId = value;
					this.SendPropertyChanged("TimetableId");
					this.OnTimetableIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int")]
		public System.Nullable<int> ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weekdays", DbType="Int")]
		public System.Nullable<int> Weekdays
		{
			get
			{
				return this._Weekdays;
			}
			set
			{
				if ((this._Weekdays != value))
				{
					this.OnWeekdaysChanging(value);
					this.SendPropertyChanging();
					this._Weekdays = value;
					this.SendPropertyChanged("Weekdays");
					this.OnWeekdaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Times", DbType="NVarChar(50)")]
		public string Times
		{
			get
			{
				return this._Times;
			}
			set
			{
				if ((this._Times != value))
				{
					this.OnTimesChanging(value);
					this.SendPropertyChanging();
					this._Times = value;
					this.SendPropertyChanged("Times");
					this.OnTimesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="Int")]
		public System.Nullable<int> TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Timetable", Storage="_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Timetables.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Timetables.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Timetable", Storage="_Teacher", ThisKey="TeacherId", OtherKey="TeacherId", IsForeignKey=true, DeleteRule="SET NULL")]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.Timetables.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.Timetables.Add(this);
						this._TeacherId = value.TeacherId;
					}
					else
					{
						this._TeacherId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
